/*
Given a string of length n, generate all of its subsequences. 
A subsequence of a given string (sequence) is a string (sequence) that is generated by 
removing zero or more characters from the given string (sequence) without changing its 
order.
Example
	
	Input : inp[] = "abc"
	Output: ["", "c", "b", "bc", "a", "ac", "ab", "abc"]
Constraints
 
  1 < n < 10
*/

#include<iostream>
#include<set>

using namespace std;

void generateSubsequences(char* inp, char* out, int i, int j, set<string>& s) {

    //base case
    if(inp[i] == '\0') { // or i == n
        out[j] = '\0';
        s.insert(string(out)); //inserting string out into set s

        // cout << out << endl;
        return;
    }

    //recursive cases

    // generate all the subsequences of inp[i.....n-1] i.e. take a sequence of (n-i) decision

    // take a decision for the character at the ith index

    // 1. include the ith character to the output subseq.
    out[j] = inp[j];
    j++;
    generateSubsequences(inp, out, i+1, j, s);
    j--; // backtracking step

    // 2. exclude the ith character from the output seq.
    generateSubsequences(inp, out, i+1, j, s);
}

int main() {

    char inp[] = "abc";
    char out[10];

    set<string> s;

    generateSubsequences(inp, out, 0, 0, s);

    for(string subsequence : s) {
        cout << subsequence << endl;
    }

    return 0;
}